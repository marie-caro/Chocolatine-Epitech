name: Chocolatine

on:
  push:
    branches-ignore:
      - " ga-ignore-"
  pull_request:
    branches-ignore:
      - " ga-ignore-"

env:
    MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-BAR-2-1-chocolatine-marie-caroline.beck.git"
    EXECUTABLES: "exe"

jobs:
  setup:
    # if: ${{ github.head_ref }} != $env.MIRROR_URL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Mirror Repo
        run: |
          if [ "${{ github.event.repository.is_mirror }}" = "true" ]; then
            exit 1
          fi

  check_coding_style:
    needs: setup
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout good branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Generate coding-style log
        run: check.sh $(pwd) $(pwd)

      - name: Check Coding
        run: |
            if [ -f coding-style-reports.log ]; then
            while IFS= read -r line; do
              file=${line%%:*}
              file=${line#*/}
              new_line=$line
              line_number=$(echo "$new_line" | cut -d':' -f2)
              error_number=${line##*:}
              error_type=$(echo "$line" | cut -d':' -f3)
              if [ "$error_type" == " MINOR" ]; then
                echo "::error title= MINOR coding style error:${file}##L${line_number#*}:: ${error_number}"
              elif [ "$error_type" == " MAJOR" ]; then
                echo "::error title= MAJOR coding style error:${file}##L${line_number#*}:: ${error_number}"
              elif [ "$error_type" == " INFO" ]; then
                echo "::error title= INFO coding style error:${file}##L${line_number#*}:: ${error_number}"
              fi
              done < coding-style-reports.log
            fi

      - name: Check if errors
        run: |
          is_error=$(cat coding-style-reports.log | wc -l)
          if [ $is_error != 0 ]; then
            exit 1
          fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout good branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Compile repo
        run: make
        timeout-minutes: 2

      - name: Clean repo
        run: make clean

      - name: Check if exe exists
        run: |
          IFS=',' read -r -a array <<< "${{ env.EXECUTABLES }}"
          for element in "${array[@]}"
          do
            if [ ! -x "$element" ]; then
              echo "Error: $exe not found or not executable."
              exit 1
            fi
          done

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    timeout-minutes: 2
    steps:
      - name: Checkout good branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Run tests
        run: |
          make
          make tests_run

  push_to_mirror:
    needs: run_tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout good branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          node-version: '20'
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}